from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from tgbot.misc.texter import texter


class UserInlineKeyboard:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""

    @classmethod
    def get_role_kb(cls, role, username, user_id):
        accept_data = f'dec:a|uid:{user_id}|un:{username}|r:{role}'
        refuse_data = f'dec:r|uid:{user_id}|un:{username}|r:{role}'
        keyboard = [
            [InlineKeyboardButton(text="üü¢ –ü—Ä–∏–Ω—è—Ç—å", callback_data=accept_data)],
            [InlineKeyboardButton(text="üî¥ –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=refuse_data)],
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)

    @classmethod
    def first_instr_kb(cls, text_list: list):
        a_text = texter(text_list, 'branch_A')
        b_text = texter(text_list, 'branch_B')
        keyboard = [
            [InlineKeyboardButton(text=a_text, callback_data="branch_A")],
            [InlineKeyboardButton(text=b_text, callback_data="branch_B")],
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)

    @classmethod
    def second_instr_kb(cls, text_list: list):
        yes_text = texter(text_list, 'button_yes')
        no_text = texter(text_list, 'button_no')
        keyboard = [
            [InlineKeyboardButton(text=yes_text, callback_data="personal:yes")],
            [InlineKeyboardButton(text=no_text, callback_data="personal:no")],
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)

    @classmethod
    def level_1_kb(cls, text_list: list):
        button_1_text = texter(text_list, 'button_1')
        button_2_text = texter(text_list, 'button_2')
        button_3_text = texter(text_list, 'button_3')
        button_return_text = texter(text_list, 'return')
        keyboard = [
            [InlineKeyboardButton(text=button_1_text, callback_data=f'level_1:{button_1_text}')],
            [InlineKeyboardButton(text=button_2_text, callback_data=f'level_1:{button_2_text}')],
            [InlineKeyboardButton(text=button_3_text, callback_data=f'level_1:{button_3_text}')],
            [InlineKeyboardButton(text=button_return_text, callback_data="branch_A")],
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)

    @classmethod
    def level_2_kb(cls, text_list: list, branch: str):
        button_1_text = texter(text_list, 'button_1')
        button_2_text = texter(text_list, 'button_2')
        button_3_text = texter(text_list, 'button_3')
        button_4_text = texter(text_list, 'button_4')
        button_5_text = texter(text_list, 'button_5')
        button_return_text = texter(text_list, 'return')
        keyboard = [
            [InlineKeyboardButton(text=button_1_text, callback_data=f'level_2:{button_1_text}')],
            [InlineKeyboardButton(text=button_2_text, callback_data=f'level_2:{button_2_text}')],
            [InlineKeyboardButton(text=button_3_text, callback_data=f'level_2:{button_3_text}')],
            [InlineKeyboardButton(text=button_4_text, callback_data=f'level_2:{button_4_text}')],
            [InlineKeyboardButton(text=button_5_text, callback_data=f'level_2:{button_5_text}')],
        ]
        if branch == "A":
            keyboard.append([InlineKeyboardButton(text=button_return_text, callback_data="branch_A")])
        else:
            keyboard.append([InlineKeyboardButton(text=button_return_text, callback_data="start")])
        return InlineKeyboardMarkup(inline_keyboard=keyboard)

    @classmethod
    def request_photo_kb(cls, text_list: list, branch: str):
        yes_text = texter(text_list, 'button_yes')
        no_text = texter(text_list, 'button_no')
        button_return_text = texter(text_list, 'return')
        keyboard = [
            [InlineKeyboardButton(text=yes_text, callback_data="photo:yes")],
            [InlineKeyboardButton(text=no_text, callback_data="photo:no")],
        ]
        if branch == "A":
            keyboard.append([InlineKeyboardButton(text=button_return_text, callback_data="branch_A")])
        else:
            keyboard.append([InlineKeyboardButton(text=button_return_text, callback_data="start")])
        return InlineKeyboardMarkup(inline_keyboard=keyboard)

    @classmethod
    def restart_a_kb(cls, text_list: list):
        button_return_text = texter(text_list, 'return')
        keyboard = [
            [InlineKeyboardButton(text=button_return_text, callback_data="branch_A")],
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)

    @classmethod
    def restart_b_kb(cls, text_list: list):
        button_return_text = texter(text_list, 'return')
        keyboard = [
            [InlineKeyboardButton(text=button_return_text, callback_data="start")],
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)

    @classmethod
    def admin_answer_kb(cls, user_id: int):
        keyboard = [
            [InlineKeyboardButton(text='üìû –û—Ç–≤–µ—Ç–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É', callback_data=f'dialog:{user_id}')],
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)


class AdminInlineKeyboard(InlineKeyboardMarkup):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∞–¥–º–∏–Ω–∞"""

    @classmethod
    def home_kb(cls) -> InlineKeyboardMarkup:
        keyboard = [[InlineKeyboardButton(text='üè† –ù–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω', callback_data='home')]]
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard)
        return keyboard

    @classmethod
    def main_menu_kb(cls, role: str):
        keyboard = [
            [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤", callback_data="list:admin")],
            [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤", callback_data="list:moderator")],
            [InlineKeyboardButton(text="üñä –†–µ–¥–∞–∫—Ç—É—Ä–∞ —Ç–µ–∫—Å—Ç–æ–≤", callback_data="edition")],
            [InlineKeyboardButton(text="üì® –†–∞—Å—Å—ã–ª–∫–∞", callback_data="mailing:start")],
            [InlineKeyboardButton(text="üóÑ –ó–∞–ø—Ä–æ—Å–∏—Ç—å –ë–î", callback_data="db:start")],
            [InlineKeyboardButton(text="üîé –ù–∞–π—Ç–∏ –æ–±—Ä–∞—â–µ–Ω–∏–µ", callback_data="ticket")],
        ]
        if role == "root":
            return InlineKeyboardMarkup(inline_keyboard=keyboard)
        elif role == "admin":
            return InlineKeyboardMarkup(inline_keyboard=keyboard[2:])
        else:
            return InlineKeyboardMarkup(inline_keyboard=keyboard[4:])

    @classmethod
    def roles_list_kb(cls, role: str, users: list):
        keyboard = []
        for username in users:
            button = [InlineKeyboardButton(text=f"@{username}", callback_data=f"{role}:{username}")]
            keyboard.append(button)
        keyboard.append([InlineKeyboardButton(text="üè† –ù–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω", callback_data="home")])
        return InlineKeyboardMarkup(inline_keyboard=keyboard)

    @classmethod
    def profile_kb(cls, user_id: str, role: str):
        keyboard = [
            [InlineKeyboardButton(text='‚ùå –£–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞', callback_data=f'delete:{role}|user_id:{user_id}')],
            [InlineKeyboardButton(text="üè† –ù–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω", callback_data="home")],
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)

    @classmethod
    def accept_deleting_kb(cls, username: str, role: str):
        keyboard = [
            [InlineKeyboardButton(text='üëç –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é', callback_data=f'accept_deleting:{role}|user_id:{username}')],
            [InlineKeyboardButton(text="üè† –ù–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω", callback_data="home")],
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)

    @classmethod
    def edition_lvl_1(cls):
        keyboard = [
            [InlineKeyboardButton(text='–ü–µ—Ä–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è', callback_data='edit:lvl_2|br:X|ch:1_instr')],
            [InlineKeyboardButton(text='–í–µ—Ç–∫–∞ –ê', callback_data='edit:lvl_1|br:A')],
            [InlineKeyboardButton(text='–í–µ—Ç–∫–∞ B', callback_data='edit:lvl_1|br:B')],
            [InlineKeyboardButton(text='–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ', callback_data='edit:lvl_2|br:X|chapter:remind')],
            [InlineKeyboardButton(text='–ü–µ—Ä–µ–ø–∏—Å–∫–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º', callback_data='edit:lvl_2|br:X|chapter:dialog')],
            [InlineKeyboardButton(text="üè† –ù–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω", callback_data="home")],
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)

    @classmethod
    def edition_lvl_2(cls, branch: str):
        keyboard = []
        keys = {
            "A": {
                '–í—Ç–æ—Ä–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è': '2_instr',
                '–û—Ç–∫–∞–∑ –æ—Ç –û–ü–î': 'ref_pers',
                '–ó–∞–ø—Ä–æ—Å –§–ò–û': 'req_name',
                '–ú–µ—Ç–æ–¥ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞': 'req_phone',
                '–†—É—á–Ω–æ–π –≤–≤–æ–¥ —Ç–µ–ª–µ—Ñ–æ–Ω–∞': 'manual_phone',
                '–£—Ä–æ–≤–µ–Ω—å 1': 'level_1',
                '–£—Ä–æ–≤–µ–Ω—å 2': 'level_2',
                '–ü—Ä–æ—Å—å–±–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è': 'petition',
                '–ó–∞–ø—Ä–æ—Å —Ñ–æ—Ç–æ': 'req_photo',
                '–ü—Ä–∏–Ω—è—Ç–∏–µ —Ñ–æ—Ç–æ': 'accept_photo',
                '–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å': 'gratitude',
            },
            "B": {
                '–£—Ä–æ–≤–µ–Ω—å 2': 'level_2',
                '–ü—Ä–æ—Å—å–±–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è': 'petition',
                '–ó–∞–ø—Ä–æ—Å —Ñ–æ—Ç–æ': 'req_photo',
                '–ü—Ä–∏–Ω—è—Ç–∏–µ —Ñ–æ—Ç–æ': 'accept_photo',
                '–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å': 'gratitude',
            }
        }
        chapter_dict = keys[branch]
        for c in chapter_dict.keys():
            kb_button = [InlineKeyboardButton(
                text=c,
                callback_data=f'edit:lvl_2|br:{branch}|ch:{chapter_dict[c]}'
            )]
            keyboard.append(kb_button)
        keyboard.append([InlineKeyboardButton(text='üìÉ –ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç—É—Ä—ã', callback_data='edition')])
        keyboard.append([InlineKeyboardButton(text='üè† –ù–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω', callback_data='home')])
        return InlineKeyboardMarkup(inline_keyboard=keyboard)

    @classmethod
    def edition_lvl_3(cls, branch: str, chapter: str):
        keyboard = []
        subjects = {
            '1_instr': {
                '–°–æ–æ–±—â–µ–Ω–∏–µ': 'message',
                '–ö–Ω. –í–µ—Ç–∫–∞ –ê': 'branch_A',
                '–ö–Ω. –í–µ—Ç–∫–∞ –í': 'branch_B',
            },
            '2_instr': {
                '–°–æ–æ–±—â–µ–Ω–∏–µ': 'message',
                '–ö–Ω–æ–ø–∫–∞ –î–ê': 'button_yes',
                '–ö–Ω–æ–ø–∫–∞ –ù–ï–¢': 'button_no'
            },
            'ref_pers': {
                '–°–æ–æ–±—â–µ–Ω–∏–µ': 'message',
                '–ö–Ω–æ–ø–∫–∞ –í–û–ó–í–†–ê–¢': 'return'
            },
            'req_name': {
                '–°–æ–æ–±—â–µ–Ω–∏–µ': 'message'
            },
            'req_phone': {
                '–°–æ–æ–±—â–µ–Ω–∏–µ': 'message'
            },
            'manual_phone': {
                '–°–æ–æ–±—â–µ–Ω–∏–µ': 'message'
            },
            'level_1': {
                '–°–æ–æ–±—â–µ–Ω–∏–µ': 'message',
                '–ö–Ω–æ–ø–∫–∞ 1': 'button_1',
                '–ö–Ω–æ–ø–∫–∞ 2': 'button_2',
                '–ö–Ω–æ–ø–∫–∞ 3': 'button_3',
                '–ö–Ω. –í–û–ó–í–†–ê–¢': 'return'
            },
            'level_2': {
                '–°–æ–æ–±—â–µ–Ω–∏–µ': 'message',
                '–ö–Ω–æ–ø–∫–∞ 1': 'button_1',
                '–ö–Ω–æ–ø–∫–∞ 2': 'button_2',
                '–ö–Ω–æ–ø–∫–∞ 3': 'button_3',
                '–ö–Ω–æ–ø–∫–∞ 4': 'button_4',
                '–ö–Ω–æ–ø–∫–∞ 5': 'button_5',
                '–ö–Ω. –í–û–ó–í–†–ê–¢': 'return'
            },
            'petition': {
                '–°–æ–æ–±—â–µ–Ω–∏–µ': 'message'
            },
            'req_photo': {
                '–°–æ–æ–±—â–µ–Ω–∏–µ': 'message',
                '–ö–Ω–æ–ø–∫–∞ –î–ê': 'button_yes',
                '–ö–Ω–æ–ø–∫–∞ –ù–ï–¢': 'button_no',
                '–ö–Ω. –í–û–ó–í–†–ê–¢': 'return'
            },
            'accept_photo': {
                '–°–æ–æ–±—â–µ–Ω–∏–µ': 'message',
                '–ö–Ω. –í–û–ó–í–†–ê–¢': 'return'
            },
            'gratitude': {
                '–°–æ–æ–±—â–µ–Ω–∏–µ': 'message',
                '–ö–Ω. –í–û–ó–í–†–ê–¢': 'return'
            },
            'remind': {
                '–°–æ–æ–±—â–µ–Ω–∏–µ': 'message',
                '–ö–Ω. –í–û–ó–í–†–ê–¢': 'return'
            },
            'dialog': {
                '–°–æ–æ–±—â–µ–Ω–∏–µ': 'message',
                '–ö–Ω. –û–¢–í–ï–¢–ò–¢–¨': 'button_answer'
            }
        }
        chapter_dict = subjects[chapter]
        for c in chapter_dict.keys():
            kb_button = [InlineKeyboardButton(
                text=c,
                callback_data=f'edit:lvl_3|branch:{branch}|chapter:{chapter}|subject:{chapter_dict[c]}'
            )]
            keyboard.append(kb_button)
        keyboard.append([InlineKeyboardButton(text='üìÉ –ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç—É—Ä—ã', callback_data='edition')])
        keyboard.append([InlineKeyboardButton(text='üè† –ù–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω', callback_data='home')])
        return InlineKeyboardMarkup(inline_keyboard=keyboard)

    @classmethod
    def edition_kb(cls):
        keyboard = [
            [InlineKeyboardButton(text='üìÉ –ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç—É—Ä—ã', callback_data='edition')],
            [InlineKeyboardButton(text='üè† –ù–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω', callback_data='home')],
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)

    @classmethod
    def ticket_kb(cls, user_id: str):
        keyboard = [
            [
                InlineKeyboardButton(text='üìû –ù–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É', callback_data=f'dialog:{user_id}'),
                InlineKeyboardButton(text='üè† –ù–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω', callback_data='home'),
            ],
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)

    @classmethod
    def mailing_group_kb(cls):
        keyboard = [
            [InlineKeyboardButton(text='–í–µ—Ç–∫–∞ –ê', callback_data='mailing:A')],
            [InlineKeyboardButton(text='–í–µ—Ç–∫–∞ B', callback_data='mailing:B')],
            [InlineKeyboardButton(text='–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', callback_data='mailing:all')],
            [InlineKeyboardButton(text='üè† –ù–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω', callback_data='home')],
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)

    @classmethod
    def db_branch_kb(cls):
        keyboard = [
            [InlineKeyboardButton(text='–í–µ—Ç–∫–∞ –ê', callback_data='db:branch|branch:A')],
            [InlineKeyboardButton(text='–í–µ—Ç–∫–∞ B', callback_data='db:branch|branch:B')],
            [InlineKeyboardButton(text='–í—Å–µ –æ–±—Ä–∞—â–µ–Ω–∏—è', callback_data='db:branch|branch:all')],
            [InlineKeyboardButton(text='üè† –ù–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω', callback_data='home')],
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)

    @classmethod
    def db_period_kb(cls, branch: str):
        keyboard = [
            [InlineKeyboardButton(text='1 –ù–µ–¥–µ–ª—è', callback_data=f'db:period|branch:{branch}|period:week')],
            [InlineKeyboardButton(text='1 –ú–µ—Å—è—Ü', callback_data=f'db:period|branch:{branch}|period:month')],
            [InlineKeyboardButton(text='–ó–∞ –≤—Å—ë –≤—Ä–µ–º—è', callback_data=f'db:period|branch:{branch}|period:infinity')],
            [InlineKeyboardButton(text='üè† –ù–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω', callback_data='home')],
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)

    @classmethod
    def user_answer_kb(cls, text_list: list, admin_id: int):
        answer_text = texter(text_list, 'button_answer')
        keyboard = [
            [InlineKeyboardButton(text=answer_text, callback_data=f'answer_admin:{admin_id}')],
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)


