import os
from datetime import timedelta, datetime

from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.filters import Command
from aiogram import F, Router, types

from create_bot import bot, logger
from tgbot.filters.admin import RootFilter, AdminFilter, ModeratorFilter
from tgbot.keyboards.inline import AdminInlineKeyboard as inline_kb
from tgbot.misc.file_sender import file_sender
from tgbot.misc.list_create import create_excel
from tgbot.misc.states import AdminFSM
from tgbot.models.redis_connector import RedisConnector as rds
from tgbot.models.sql_connector import UserDAO, TextsDAO, TicketsDAO

root_router = Router()
admin_router = Router()
moderator_router = Router()

root_router.message.filter(RootFilter())
admin_router.message.filter(AdminFilter())
moderator_router.message.filter(ModeratorFilter())

root_router.callback_query.filter(RootFilter())
admin_router.callback_query.filter(AdminFilter())
moderator_router.callback_query.filter(ModeratorFilter())


@root_router.callback_query(F.data.split(":")[0] == "dec")
async def roles_decision(callback: CallbackQuery):
    decision = callback.data.split("|")[0].split(":")[1]
    user_id = callback.data.split("|")[1].split(":")[1]
    username = callback.data.split("|")[2].split(":")[1]
    role = callback.data.split("|")[3].split(":")[1]
    if role == 'moderator':
        text_role = '–º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤'
    else:
        text_role = '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤'
    if decision == 'a':
        current_role_list = await rds.get_role_redis(role)
        if user_id in current_role_list:
            admin_text = f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ {text_role}'
            kb = inline_kb.home_kb()
            await callback.message.answer(admin_text, reply_markup=kb)
            await bot.answer_callback_query(callback.id)
            return
        else:
            admin_text = f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ {text_role}'
            user_text = f'‚ö†Ô∏è<b> –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏</b>\n\n –í—ã —Ç–µ–ø–µ—Ä—å –≤ —Å–ø–∏—Å–∫–µ {text_role}! –ù–∞–∂–º–∏—Ç–µ ' \
                        '–∫–Ω–æ–ø–∫—É –ø–æ–¥ —ç—Ç–∏–º  —Å–æ–æ–±—â–µ–Ω–∏–µ–º üëá'
        await rds.create_role_redis(user_id, role)
    else:
        admin_text = f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username} –æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞'
        user_text = '‚ö†Ô∏è<b> –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏</b>\n\n –í–∞–º –æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø–æ–¥ ' \
                    '—ç—Ç–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º üëá'
    kb = inline_kb.home_kb()
    await bot.send_message(user_id, user_text, reply_markup=kb)
    await callback.message.answer(admin_text, reply_markup=kb)
    await bot.answer_callback_query(callback.id)


@root_router.message(Command("start"))
async def main_menu(message: Message, state: FSMContext):
    text = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
    kb = inline_kb.main_menu_kb('root')
    await state.set_state(AdminFSM.home)
    await message.answer(text, reply_markup=kb)


@root_router.callback_query(F.data == "home")
async def main_menu(callback: CallbackQuery, state: FSMContext):
    text = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
    kb = inline_kb.main_menu_kb('root')
    await state.set_state(AdminFSM.home)
    await callback.message.answer(text, reply_markup=kb)
    await bot.answer_callback_query(callback.id)


@admin_router.message(Command("start"))
async def main_menu(message: Message, state: FSMContext):
    text = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
    kb = inline_kb.main_menu_kb('admin')
    await state.set_state(AdminFSM.home)
    await message.answer(text, reply_markup=kb)


@admin_router.callback_query(F.data == "home")
async def main_menu(callback: CallbackQuery, state: FSMContext):
    text = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
    kb = inline_kb.main_menu_kb('admin')
    await state.set_state(AdminFSM.home)
    await callback.message.answer(text, reply_markup=kb)
    await bot.answer_callback_query(callback.id)


@moderator_router.message(Command("start"))
async def main_menu(message: Message, state: FSMContext):
    text = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä"
    kb = inline_kb.main_menu_kb('moderator')
    await state.set_state(AdminFSM.home)
    await message.answer(text, reply_markup=kb)


@moderator_router.callback_query(F.data == "home")
async def main_menu(callback: CallbackQuery, state: FSMContext):
    text = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä"
    kb = inline_kb.main_menu_kb('moderator')
    await state.set_state(AdminFSM.home)
    await callback.message.answer(text, reply_markup=kb)
    await bot.answer_callback_query(callback.id)


@root_router.callback_query(F.data.split(":")[0] == "list")
async def roles_list(callback: CallbackQuery):
    role = callback.data.split(":")[1]
    admin_ids = await rds.get_role_redis(role)
    admin_usernames = []
    for admin_id in admin_ids:
        admin = await UserDAO.get_one_or_none(user_id=str(admin_id))
        admin_usernames.append(admin["username"])
    if role == 'moderator':
        text_role = '–º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤'
    else:
        text_role = '–∞–¥–º–∏–Ω–æ–≤'
    text = f'–°–ø–∏—Å–æ–∫ –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö {text_role}:'
    kb = inline_kb.roles_list_kb(role=role, users=admin_usernames)
    await callback.message.answer(text, reply_markup=kb)
    await bot.answer_callback_query(callback.id)


@root_router.callback_query(F.data.split(":")[0] == "admin")
@root_router.callback_query(F.data.split(":")[0] == "moderator")
async def profile_user(callback: CallbackQuery):
    role = callback.data.split(":")[0]
    username = callback.data.split(":")[1]
    profile = await UserDAO.get_one_or_none(username=username)
    text = f'<b>–†–æ–ª—å:</b> {role}\n<b>Username:</b> @{username}'
    kb = inline_kb.profile_kb(user_id=profile["username"], role=role)
    await callback.message.answer(text, reply_markup=kb)
    await bot.answer_callback_query(callback.id)


@root_router.callback_query(F.data.split(":")[0] == "delete")
async def delete_user(callback: CallbackQuery):
    role = callback.data.split("|")[0].split(":")[1]
    username = callback.data.split("|")[1].split(":")[1]
    text = f'–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å {username}?'
    kb = inline_kb.accept_deleting_kb(username=username, role=role)
    await callback.message.answer(text, reply_markup=kb)
    await bot.answer_callback_query(callback.id)


@root_router.callback_query(F.data.split(":")[0] == "accept_deleting")
async def accept_delete(callback: CallbackQuery):
    role = callback.data.split("|")[0].split(":")[1]
    username = callback.data.split("|")[1].split(":")[1]
    profile = await UserDAO.get_one_or_none(username=username)
    text = f'@{username} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω'
    kb = inline_kb.home_kb()
    await rds.delete_role_redis(user_id=profile["user_id"], role=role)
    await callback.message.answer(text, reply_markup=kb)
    await bot.answer_callback_query(callback.id)


@admin_router.callback_query(F.data == "edition")
async def edition_text(callback: CallbackQuery, state: FSMContext):
    text = '–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ç–∫—É'
    kb = inline_kb.edition_lvl_1()
    await state.set_state(AdminFSM.home)
    await callback.message.answer(text, reply_markup=kb)
    await bot.answer_callback_query(callback.id)


@admin_router.callback_query(F.data.split(":")[0] == "edit")
async def edition_text(callback: CallbackQuery, state: FSMContext):
    lvl = callback.data.split('|')[0].split(':')[1]
    branch = callback.data.split('|')[1].split(':')[1]
    if lvl == 'lvl_1':
        text = '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'
        kb = inline_kb.edition_lvl_2(branch)
    elif lvl == "lvl_2":
        chapter = callback.data.split('|')[2].split(':')[1]
        text = "–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç"
        kb = inline_kb.edition_lvl_3(branch=branch, chapter=chapter)
    else:
        subject = callback.data.split('|')[3].split(':')[1]
        chapter = callback.data.split('|')[2].split(':')[1]
        obj_in_table = f"branch:{branch}|chapter:{chapter}|subject:{subject}"
        current_text = await TextsDAO.get_one_or_none(subject=obj_in_table)
        if current_text is None:
            text = '–ü—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ'
        else:
            text = f'–°–µ–π—á–∞—Å —Ç–µ–∫—Å—Ç —Ç–∞–∫–æ–π:\n\n{current_text["text"]}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞ –≥–ª–∞–≤–Ω—É—é'
        kb = inline_kb.edition_kb()
        await state.update_data(
            branch=branch,
            chapter=chapter,
            subject=subject,
            current_text=current_text,
        )
        await state.set_state(AdminFSM.edit_text)
    await callback.message.answer(text, reply_markup=kb)
    await bot.answer_callback_query(callback.id)


@admin_router.message(F.text, AdminFSM.edit_text)
async def edition_finish(message: Message, state: FSMContext):
    state_data = await state.get_data()
    branch = state_data["branch"]
    chapter = state_data["chapter"]
    subject = state_data["subject"]
    current_text = state_data["current_text"]
    obj_in_table = f"branch:{branch}|chapter:{chapter}|subject:{subject}"
    text = '–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã'
    kb = inline_kb.edition_kb()
    if subject == 'message':
        new_text = message.html_text
    else:
        new_text = message.text
    if current_text is None:
        await TextsDAO.create(subject=obj_in_table, text=new_text)
    else:
        await TextsDAO.update(subject=obj_in_table, text=new_text)
    await message.answer(text, reply_markup=kb)


@admin_router.callback_query(F.data.split(":")[0] == "mailing")
async def mailing(callback: CallbackQuery, state: FSMContext):
    mailing_group = callback.data.split(":")[1]
    if mailing_group == "start":
        text = "–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å–∞—Ç–æ–≤ —Ä–∞—Å—Å—ã–ª–∫–∏"
        kb = inline_kb.mailing_group_kb()
    else:
        text = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ö –Ω–µ–º—É –º–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, gif-–∞–Ω–∏–º–∞—Ü–∏—é, –¥–æ–∫—É–º–µ–Ω—Ç. –†–∞—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç " \
           "–æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∞ —Å—Ä–∞–∑—É"
        kb = inline_kb.home_kb()
        await state.set_state(AdminFSM.mailing)
        await state.update_data(mailing_group=mailing_group)
    await callback.message.answer(text, reply_markup=kb)


@admin_router.message(AdminFSM.mailing)
async def mailing(message: Message, state: FSMContext):
    state_data = await state.get_data()
    mailing_group = state_data["mailing_group"]
    if mailing_group == "all":
        users = await UserDAO.get_many()
    else:
        users = await TicketsDAO.get_users_by_branch(branch=mailing_group)
    counter = 0
    for user in users:
        user_id = user['user_id']
        try:
            if message.content_type == 'text':
                await bot.send_message(user_id, message.text)
            else:
                content_type = message.content_type
                if message.photo:
                    file_id = message.photo[-1].file_id
                else:
                    obj_dict = message.dict()
                    file_id = obj_dict[message.content_type]['file_id']
                caption = message.caption
                await file_sender(file_id, content_type, user_id, caption=caption)
            counter += 1
        except:
            pass
    await state.set_state(AdminFSM.home)
    text = f'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ <i><b>{counter}/{len(users)}</b></i> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
    kb = inline_kb.home_kb()
    await message.answer(text, reply_markup=kb)


@moderator_router.callback_query(F.data.split(":")[0] == "db")
async def get_db(callback: CallbackQuery):
    if callback.data.split(":")[1] == "start":
        text = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤"
        kb = inline_kb.db_branch_kb()
    elif callback.data.split("|")[0].split(":")[1] == "branch":
        branch = callback.data.split(":")[-1]
        text = "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –æ–±—Ä–∞—â–µ–Ω–∏–π"
        kb = inline_kb.db_period_kb(branch=branch)
    else:
        branch = callback.data.split("|")[1].split(":")[1]
        period = callback.data.split("|")[2].split(":")[1]
        start_period = {
            "week": datetime.utcnow() - timedelta(days=7),
            "month": datetime.utcnow() - timedelta(days=30),
            "infinity": datetime(year=2000, month=1, day=1),
        }
        tickets = await TicketsDAO.get_db(branch=branch, period=start_period[period])
        await create_excel(ticket_list=tickets, period=period)
        kb = inline_kb.home_kb()
        file = FSInputFile(path=f'{os.getcwd()}/{period}_tickets.xlsx', filename=f"{period}_tickets.xlsx")
        await bot.send_document(chat_id=callback.from_user.id, document=file, reply_markup=kb)
        await bot.answer_callback_query(callback.id)
        return
    await callback.message.answer(text, reply_markup=kb)
    await bot.answer_callback_query(callback.id)


@moderator_router.callback_query(F.data == "ticket")
async def get_ticket_start(callback: CallbackQuery, state: FSMContext):
    text = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—Ä–∞—â–µ–Ω–∏—è'
    kb = inline_kb.home_kb()
    await state.set_state(AdminFSM.ticket_id)
    await callback.message.answer(text, reply_markup=kb)
    await bot.answer_callback_query(callback.id)


@moderator_router.message(F.text, AdminFSM.ticket_id)
async def get_ticket_finish(message: Message):
    if message.text.isdigit():
        ticket_id = int(message.text)
        ticket = await TicketsDAO.get_one_or_none(id=ticket_id)
        if ticket is None:
            kb = inline_kb.home_kb()
            text = '–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
        else:
            media_list = ticket["media"]
            ticket_date = (ticket["create_timestamp"] + timedelta(hours=3)).strftime('%d-%m-%Y %H:%M')
            if ticket['phone_method'] == 'auto':
                phone_method = '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤–≤–æ–¥'
            elif ticket["phone_method"] == "manual":
                phone_method = '–†—É—á–Ω–æ–π –≤–≤–æ–¥'
            else:
                phone_method = "---"
            if ticket['username'] is None:
                username = ''
            else:
                username = f"@{ticket['username']}"
            text = [
                f"–û–±—Ä–∞—â–µ–Ω–∏–µ <i>{ticket['id']}</i> –æ—Ç <i>{ticket_date}</i>",
                f"<b>–í–µ—Ç–∫–∞:</b> <i>{ticket['branch']}</i>",
                f"<b>–ö–ª–∏–µ–Ω—Ç:</b> <i>{ticket['full_name']}</i> {username}",
                f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <i>{ticket['phone_number']}</i> [{phone_method}]",
                f"<b>–í–æ–ø—Ä–æ—Å 1:</b> <i>{ticket['level_1']}</i>",
                f"<b>–í–æ–ø—Ä–æ—Å 2:</b> <i>{ticket['level_2']}</i>\n",
                f"<b>–û–±—Ä–∞—â–µ–Ω–∏–µ:</b> <i>{ticket['petition']}</i>"
            ]
            if len(media_list) == 0:
                text = '\n'.join(text)
            elif len(media_list) == 1:
                file_id = media_list[0]['file_id']
                file_type = media_list[0]['type_obj']
                await file_sender(file_id=file_id, file_type=file_type, chat_id=message.from_user.id)
                text = '\n'.join(text)
            else:
                media_group = []
                for file in media_list:
                    file_id = file['file_id']
                    file_type = file['type_obj']
                    media_group.append({"media": file_id, "type": file_type})
                await message.answer_media_group(media_group)
                text = '\n'.join(text)
            kb = inline_kb.ticket_kb(user_id=ticket['user_id'])
    else:
        text = '–í—ã –≤–≤–µ–ª–∏ –Ω–µ id –æ–±—Ä–∞—â–µ–Ω–∏—è.'
        kb = inline_kb.home_kb()
    await message.answer(text, reply_markup=kb)


@moderator_router.callback_query(F.data.split(":")[0] == "dialog")
async def dialog_start(callback: CallbackQuery, state: FSMContext):
    user_id = callback.data.split(':')[1]
    text = '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ö –Ω–µ–º—É –º–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, gif-–∞–Ω–∏–º–∞—Ü–∏—é, –¥–æ–∫—É–º–µ–Ω—Ç. –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç ' \
           '–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å—Ä–∞–∑—É'
    kb = inline_kb.home_kb()
    await state.set_state(AdminFSM.dialog)
    await state.update_data(user_id=user_id)
    await callback.message.answer(text, reply_markup=kb)
    await bot.answer_callback_query(callback.id)


@moderator_router.message(AdminFSM.dialog)
async def dialog_finish(message: Message, state: FSMContext):
    state_data = await state.get_data()
    user_id = state_data["user_id"]
    try:
        admin_text = '‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'
        text_list = await TextsDAO.get_user_texts(branch="X", chapter="dialog")
        admin_id = message.from_user.id
        user_kb = inline_kb.user_answer_kb(text_list, admin_id)
        if message.content_type == 'text':
            await bot.send_message(user_id, message.text, reply_markup=user_kb)
        else:
            content_type = message.content_type
            if message.photo:
                file_id = message.photo[-1].file_id
            else:
                obj_dict = message.dict()
                file_id = obj_dict[message.content_type]['file_id']
            caption = message.caption
            await file_sender(file_id, content_type, user_id, caption=caption, kb=user_kb)
    except Exception as ex:
        logger.info(ex)
        admin_text = '‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'
    admin_kb = inline_kb.home_kb()
    await state.set_state(AdminFSM.home)
    await message.answer(admin_text, reply_markup=admin_kb)
